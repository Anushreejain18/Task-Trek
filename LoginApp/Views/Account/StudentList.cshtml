@model List<Student>

@{
    ViewBag.Title = "Student List";
}

<div class="student-list-container">
    <div class="content-card">
        <h2 class="card-header">👥 Student List</h2>

        @if (TempData["Message"] != null)
        {
            <p class="success">@TempData["Message"]</p>
        }

        <div class="student-content">
            @if (TempData["Error"] != null)
            {
                <p class="error">@TempData["Error"]</p>
            }

            <!-- Class Filter -->
            <div class="form-row">
                <div class="form-group">
                    <label for="classFilter">Filter by Class:</label>
                    <select id="classFilter" onchange="filterStudents()">
                        <option value="all">All Classes</option>
                        @if (ViewBag.Classes != null)
                        {
                            foreach (var className in ViewBag.Classes as List<string>)
                            {
                                <option value="@className" @(ViewBag.SelectedClass == className ? "selected" : "")>@className</option>
                            }
                        }

                    </select>
                </div>
                <div class="form-group">
                    <label for="searchInput">Search:</label>
                    <input type="text" id="searchInput" placeholder="Search by Name, Roll No, or Username..." onkeyup="liveSearch()" />
                </div>
            </div>

            <!-- Student Table -->
            @if (Model != null && Model.Any())
            {
                <table id="studentTable">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Roll No</th>
                            <th>Class</th>
                            <th>Username</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var student in Model)
                        {
                            <tr>
                                <td>@student.Name</td>
                                <td>@student.RollNo</td>
                                <td>@student.Class</td>
                                <td>@student.Username</td>
                                <td>
                                    <a href="@Url.Action("EditStudent", "Account", new { id = student.Id })" class="btn btn-edit">Edit</a>
                                    <button class="btn btn-delete" data-id="@student.Id">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!-- Pagination -->
                <div class="pagination">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="@Url.Action("StudentList", "Account", new { page = ViewBag.CurrentPage - 1, pageSize = 10, selectedClass = ViewBag.SelectedClass, searchTerm = ViewBag.SearchTerm })">« Prev</a>
                    }

                    @for (int i = 1; i <= ViewBag.TotalPages; i++)
                    {
                        <a href="@Url.Action("StudentList", "Account", new { page = i, pageSize = 10, selectedClass = ViewBag.SelectedClass, searchTerm = ViewBag.SearchTerm })"
                           class="@(i == ViewBag.CurrentPage ? "active" : "")">@i</a>
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="@Url.Action("StudentList", "Account", new { page = ViewBag.CurrentPage + 1, pageSize = 10, selectedClass = ViewBag.SelectedClass, searchTerm = ViewBag.SearchTerm })">Next »</a>
                    }
                </div>
            }
            else
            {
                <p class="no-data">No students found.</p>
            }
        </div>
    </div>
</div>


<!-- JavaScript for Filtering & Showing Students -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let selectedClass = document.getElementById("classDropdown").value;
        if (selectedClass) {
            document.getElementById("studentSection").style.display = "block";
        }
    });

    function filterStudents() {
        let selectedClass = document.getElementById("classFilter").value;
        let searchTerm = document.getElementById("searchInput").value;

        window.location.href = '@Url.Action("StudentList", "Account")' +
            '?selectedClass=' + encodeURIComponent(selectedClass) +
            '&searchTerm=' + encodeURIComponent(searchTerm);
    }

    function filterByClass() {
        let selectedClass = document.getElementById("classDropdown").value;
        if (selectedClass) {
            document.getElementById("studentSection").style.display = "block";
        } else {
            document.getElementById("studentSection").style.display = "none";
        }
    }

    function liveSearch() {
        let searchInput = document.getElementById("searchInput").value.toLowerCase();
        let rows = document.querySelectorAll("#studentTable tbody tr");

        rows.forEach(row => {
            let name = row.cells[0].textContent.toLowerCase();
            let roll = row.cells[1].textContent.toLowerCase();
            let studentClass = row.cells[2].textContent.toLowerCase();
            let username = row.cells[3].textContent.toLowerCase();

            if (name.includes(searchInput) || roll.includes(searchInput) || studentClass.includes(searchInput) || username.includes(searchInput)) {
                row.style.display = "";
            } else {
                row.style.display = "none";
            }
        });
    }

</script>


<!-- 🔹 CSS for Styling -->
<style>
    body {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: white;
    }

    .student-list-container {
        display: flex;
        justify-content: center;
        align-items: flex-start;
        padding: 40px;
        background: #ecf0f1;
    }

    .content-card {
        width: 100vw;
        height: 100vh;
        background-color: #ecf0f1;
        padding: 30px 40px;
    }

    .card-header {
        font-size: 28px;
        color: #2C3E50;
        margin-top: -30px;
        margin-bottom: 40px;
        border-bottom: 2px solid #2C3E50;
        padding-bottom: 10px;
    }

    .form-row {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
        margin-bottom: 20px;
    }

    .form-group {
        flex: 1;
        margin: 10px;
    }

    label {
        display: block;
        margin-bottom: 6px;
        font-weight: bold;
        color: #2C3E50;
    }

    select, input[type="text"] {
        width: 100%;
        padding: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
    }

    .btn-link {
        background-color: #2C3E50;
        color: white;
        border: none;
        padding: 10px 18px;
        cursor: pointer;
        border-radius: 6px;
        font-size: 15px;
        transition: background 0.3s ease;
    }

        .btn-link:hover {
            background-color: #1a252f;
        }

    /* 📝 Table Styling */
    #studentSection {
        width: 100%;
        overflow-y: auto;
        max-height: 500px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin: 0 auto;
        font-size: 15px;
        background-color: #ffffff;
        overflow: hidden;
    }

    thead {
        background-color: #2C3E50;
        color: white;
    }

    th, td {
        padding: 8px;
        border: 1px solid #2C3E50;
        text-align: center;
    }

    /* 🎨 Buttons */
    .btn {
        padding: 8px 14px;
        font-size: 14px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-edit {
        background-color: #28a745;
        color: white;
    }

        .btn-edit:hover {
            background-color: #218838;
        }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

        .btn-delete:hover {
            background-color: #c82333;
        }

    .no-data {
        text-align: center;
        font-size: 16px;
        font-style: italic;
        color: #2C3E50;
        margin-top: 15px;
    }

    /* ✅ Messages */
    .success, .error {
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
    }

    .success {
        color: green;
    }

    .error {
        color: red;
    }

    /* 🔢 Pagination */
    .pagination-container {
        text-align: center;
        margin-top: 20px;
    }

    .pagination {
        text-align: center;
        margin-top: 30px;
    }

        .pagination a {
            padding: 10px 15px;
            margin: 2px;
            text-decoration: none;
            background-color: #2C3E50;
            color: white;
            border-radius: 6px;
            display: inline-block;
        }

            .pagination a.active,
            .pagination a:hover {
                background-color: #3E5668;
                font-weight: bold;
            }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".btn-delete");

        deleteButtons.forEach(button => {
            button.addEventListener("click", function () {
                const studentId = this.getAttribute("data-id");

                if (confirm("Are you sure you want to delete this student?")) {
                    fetch(`/Account/DeleteStudentConfirmed?id=${studentId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => {
                            if (response.redirected) {
                                // If controller redirects, reload to the redirected page
                                window.location.href = response.url;
                            } else if (response.ok) {
                                alert("Student deleted successfully.");
                                location.reload();
                            } else {
                                alert("Failed to delete student.");
                            }
                        })
                        .catch(error => {
                            console.error("Error:", error);
                            alert("Error occurred while deleting student.");
                        });
                }
            });
        });
    });
</script>
